(lambda board, word, reduce: reduce(lambda a, b: a if a != None else b, reduce(lambda c, d: c if any(c) else d, [[reduce(lambda x, y: x if x != None else y, reduce(lambda x, y: x if any(x) else y, [[None if (dcol == 0 and drow == 0) else None if (True in [True if (((row + i*drow) < 0) or ((row + i*drow) >= len(board)) or ((col + i*dcol) < 0) or ((col + i*dcol) >= len(board[0])) or (board[(row + i*drow)][(col + i*dcol)] != word[i])) else False for i in range(len(word))]) else (word, (row, col), [["up-left","up","up-right"],["left","","right"],["down-left","down","down-right"]][drow+1][dcol+1]) for dcol in [-1, 0, 1]] for drow in [-1, 0, 1]])) for col in range(len(board[0]))] for row in range(len(board))])))([ [ 'd', 'o', 'g' ], [ 't', 'a', 'c' ], [ 'o', 'a', 't' ], [ 'u', 'r', 'k' ]], "dog", __import__("functools").reduce)